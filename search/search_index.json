{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to run documentation? Open command prompt Move to Docs/mkdocs/api-docs mkdocs serve If this does not work: pip install mkdocs mkdocs serve If it still does not work you may have to make a virtual environment and run pip install mkdocs in there followed by mkdocs serve","title":"Index"},{"location":"#how-to-run-documentation","text":"Open command prompt Move to Docs/mkdocs/api-docs mkdocs serve If this does not work: pip install mkdocs mkdocs serve If it still does not work you may have to make a virtual environment and run pip install mkdocs in there followed by mkdocs serve","title":"How to run documentation?"},{"location":"Execute-pipeline/","text":"Pipelines What is a pipeline? A Pipeline is a list of things you want to do ( operations ) and the order you want them done ( connections ). For example, you might want to retrieve data from a database, select a few columns of data and then train a linear regression model on it. In this case you would use 3 operations and define connections between these operations. Execute Pipeline You can execute a pipeline by sending a '/Execute-pipeline' POST request to the API. What goes in? In order to execute a pipeline you will need to defien the pipeline in JSON. A pipeline is defined as follows: { \"session_id\":session_id, \"request_id\":request_id, \"connections\":[ connection_1, connection_2, ... ], \"operations\":[ operation_1, operation_2, ... ]} Example: { \"session_id\":1, \"request_id\":1, \"connections\":[ {\"from\":1, \"to\":2, \"from_port\":0, \"to_port\":0} ], \"operations\":[ {\"id\":1,\"operation\":\"load\",\"parameters\":{\"filename\":\"titanic\", \"sample\":1}}, {\"id\":2,\"operation\":\"select_columns\", \"parameters\":{\"columns\":[\"age\", \"class\"]}} ]} What comes out? The response will return a JSON dictionary With the session_id, the request_id and the results of the executed pipeline. The result will be a dictionary with the id's of the operations. The id's will have a dictionary with the ports they outputted to. The ports will have a dictionary with output and output type. Example: { \"request_id\": 1, \"result\": { \"id_1\": { \"port_0\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"class\\\", \\\"age\\\", \\\"sex\\\", \\\"survived\\\"], \\\"datatypes\\\": {\\\"class\\\": \\\"object\\\", \\\"age\\\": \\\"object\\\", \\\"sex\\\": \\\"object\\\", \\\"survived\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"1st class\\\", \\\"adults\\\", \\\"man\\\", \\\"yes\\\", 1]]}\", \"output_type\": \"data\" } }, \"id_2\": { \"port_0\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"age\\\", \\\"class\\\"], \\\"datatypes\\\": {\\\"age\\\": \\\"object\\\", \\\"class\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"adults\\\", \\\"1st class\\\", 1]]}\", \"output_type\": \"data\" }, \"port_1\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"sex\\\", \\\"survived\\\"], \\\"datatypes\\\": {\\\"sex\\\": \\\"object\\\", \\\"survived\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"man\\\", \\\"yes\\\", 1]]}\", \"output_type\": \"data\" } } }, \"session_id\": 1 } To get the output of operation with id 3 from port 0 you would call: json[\"result\"][\"id_3\"][\"port_0\"][\"output\"] Errors","title":"Pipelines"},{"location":"Execute-pipeline/#pipelines","text":"","title":"Pipelines"},{"location":"Execute-pipeline/#what-is-a-pipeline","text":"A Pipeline is a list of things you want to do ( operations ) and the order you want them done ( connections ). For example, you might want to retrieve data from a database, select a few columns of data and then train a linear regression model on it. In this case you would use 3 operations and define connections between these operations.","title":"What is a pipeline?"},{"location":"Execute-pipeline/#execute-pipeline","text":"You can execute a pipeline by sending a '/Execute-pipeline' POST request to the API.","title":"Execute Pipeline"},{"location":"Execute-pipeline/#what-goes-in","text":"In order to execute a pipeline you will need to defien the pipeline in JSON. A pipeline is defined as follows: { \"session_id\":session_id, \"request_id\":request_id, \"connections\":[ connection_1, connection_2, ... ], \"operations\":[ operation_1, operation_2, ... ]} Example: { \"session_id\":1, \"request_id\":1, \"connections\":[ {\"from\":1, \"to\":2, \"from_port\":0, \"to_port\":0} ], \"operations\":[ {\"id\":1,\"operation\":\"load\",\"parameters\":{\"filename\":\"titanic\", \"sample\":1}}, {\"id\":2,\"operation\":\"select_columns\", \"parameters\":{\"columns\":[\"age\", \"class\"]}} ]}","title":"What goes in?"},{"location":"Execute-pipeline/#what-comes-out","text":"The response will return a JSON dictionary With the session_id, the request_id and the results of the executed pipeline. The result will be a dictionary with the id's of the operations. The id's will have a dictionary with the ports they outputted to. The ports will have a dictionary with output and output type. Example: { \"request_id\": 1, \"result\": { \"id_1\": { \"port_0\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"class\\\", \\\"age\\\", \\\"sex\\\", \\\"survived\\\"], \\\"datatypes\\\": {\\\"class\\\": \\\"object\\\", \\\"age\\\": \\\"object\\\", \\\"sex\\\": \\\"object\\\", \\\"survived\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"1st class\\\", \\\"adults\\\", \\\"man\\\", \\\"yes\\\", 1]]}\", \"output_type\": \"data\" } }, \"id_2\": { \"port_0\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"age\\\", \\\"class\\\"], \\\"datatypes\\\": {\\\"age\\\": \\\"object\\\", \\\"class\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"adults\\\", \\\"1st class\\\", 1]]}\", \"output_type\": \"data\" }, \"port_1\": { \"output\": \"{\\\"columns\\\": [\\\"index\\\", \\\"sex\\\", \\\"survived\\\"], \\\"datatypes\\\": {\\\"sex\\\": \\\"object\\\", \\\"survived\\\": \\\"object\\\"}, \\\"data\\\": [[0, \\\"man\\\", \\\"yes\\\", 1]]}\", \"output_type\": \"data\" } } }, \"session_id\": 1 } To get the output of operation with id 3 from port 0 you would call: json[\"result\"][\"id_3\"][\"port_0\"][\"output\"]","title":"What comes out?"},{"location":"Execute-pipeline/#errors","text":"","title":"Errors"},{"location":"connections_info/","text":"Connections What is a connection? A connection describes a dataflow from one operation to another. For example: a connection from a load operation to a select_columns operation will send the data retrieved in the load operation to the select_columns operation so it can perform its action on that data. Defining a connection A connection is defined in JSON as follows: {\"from\":operation_id, \"to\":operation_id, \"from_port\":port_nr, \"to_port\":port_nr} Example: {\"from\":1, \"to\":2, \"from_port\":0, \"to_port\":0} It is a dictionary that defines a 'from' operation where the data comes from and a 'to' operation where the data goes to. here you fill in the id's you used when defining the operations. a 'from_port'. It also defines a 'from_port' and a 'to_port' that describe from which port in the one operation to which port in the other operation the data needs to go.","title":"connections"},{"location":"connections_info/#connections","text":"","title":"Connections"},{"location":"connections_info/#what-is-a-connection","text":"A connection describes a dataflow from one operation to another. For example: a connection from a load operation to a select_columns operation will send the data retrieved in the load operation to the select_columns operation so it can perform its action on that data.","title":"What is a connection?"},{"location":"connections_info/#defining-a-connection","text":"A connection is defined in JSON as follows: {\"from\":operation_id, \"to\":operation_id, \"from_port\":port_nr, \"to_port\":port_nr} Example: {\"from\":1, \"to\":2, \"from_port\":0, \"to_port\":0} It is a dictionary that defines a 'from' operation where the data comes from and a 'to' operation where the data goes to. here you fill in the id's you used when defining the operations. a 'from_port'. It also defines a 'from_port' and a 'to_port' that describe from which port in the one operation to which port in the other operation the data needs to go.","title":"Defining a connection"},{"location":"get-requests/","text":"Get requests The api provides some simple get requests for basic information. Get status /status Returns \"api online\" if the api is running. Get datasets /datasets Returns datasets that can be used and called with a load operation.","title":"Basic requests"},{"location":"get-requests/#get-requests","text":"The api provides some simple get requests for basic information.","title":"Get requests"},{"location":"get-requests/#get-status","text":"/status Returns \"api online\" if the api is running.","title":"Get status"},{"location":"get-requests/#get-datasets","text":"/datasets Returns datasets that can be used and called with a load operation.","title":"Get datasets"},{"location":"operations_info/","text":"Operations What is an operation? An operation is a command. Something you want to be done. A load operation for example lets you load data from a database. An operation may take parameters that define the variable parts of it's job. The load operation for example takes a 'filename' parameter that tells it what datafile it needs to load. An operation may also take inputs. This is data it receives from other operations. The 'duplicate' operation for example must get the data it duplicates from a previous operation. An operation has ports, both for input as output. These allow some operations to take multiple inputs (like the merge operation) or give multiple outputs (like the duplicate operation). Defining an operation An operation is defined in JSON as follows: {\"id\":ID,\"operation\":operation_name,\"parameters\":{\"parameter_name_1\":parameter_1, \"parameter_name_2\":parameter_2, ...}} Example: {\"id\":2,\"operation\":\"load\",\"parameters\":{\"filename\":\"titanic\"}} It is a dictionary that defines an id, an operation and a dictionary of parameters id The id is an integer of your choice. Its outputs will be defined by this id in the response so you can know which operation returned what. It is also used to define the connections. operation This is a string with the name of the operation you want to be executed. parameters This is a dictionary in which you define the parameters for the operation. Each operation has its own set of parmeters it takes.","title":"operations"},{"location":"operations_info/#operations","text":"","title":"Operations"},{"location":"operations_info/#what-is-an-operation","text":"An operation is a command. Something you want to be done. A load operation for example lets you load data from a database. An operation may take parameters that define the variable parts of it's job. The load operation for example takes a 'filename' parameter that tells it what datafile it needs to load. An operation may also take inputs. This is data it receives from other operations. The 'duplicate' operation for example must get the data it duplicates from a previous operation. An operation has ports, both for input as output. These allow some operations to take multiple inputs (like the merge operation) or give multiple outputs (like the duplicate operation).","title":"What is an operation?"},{"location":"operations_info/#defining-an-operation","text":"An operation is defined in JSON as follows: {\"id\":ID,\"operation\":operation_name,\"parameters\":{\"parameter_name_1\":parameter_1, \"parameter_name_2\":parameter_2, ...}} Example: {\"id\":2,\"operation\":\"load\",\"parameters\":{\"filename\":\"titanic\"}} It is a dictionary that defines an id, an operation and a dictionary of parameters","title":"Defining an operation"},{"location":"operations_info/#id","text":"The id is an integer of your choice. Its outputs will be defined by this id in the response so you can know which operation returned what. It is also used to define the connections.","title":"id"},{"location":"operations_info/#operation","text":"This is a string with the name of the operation you want to be executed.","title":"operation"},{"location":"operations_info/#parameters","text":"This is a dictionary in which you define the parameters for the operation. Each operation has its own set of parmeters it takes.","title":"parameters"},{"location":"under-construction/","text":"This part of the docs is still under construction","title":"devdocs"},{"location":"under-construction/#this-part-of-the-docs-is-still-under-construction","text":"","title":"This part of the docs is still under construction"},{"location":"operations/decision_tree/","text":"Training a decision tree operation name decision_tree Purpose The purpose of the decision_tree operation is to train a decision tree Example of a decision tree: Parameters Parameter Description Datatype Required Default target The target value the decision tree predicts on string yes / Inputs Port Description type 0 Dataframe with data to train on dataframe It will attempt to train on all columns in the inputted dataframe. Outputs Port Description type 0 Trained decision tree model model Note that a model can not be returned in JSON.","title":"decision_tree"},{"location":"operations/decision_tree/#training-a-decision-tree","text":"","title":"Training a decision tree"},{"location":"operations/decision_tree/#operation-name","text":"decision_tree","title":"operation name"},{"location":"operations/decision_tree/#purpose","text":"The purpose of the decision_tree operation is to train a decision tree Example of a decision tree:","title":"Purpose"},{"location":"operations/decision_tree/#parameters","text":"Parameter Description Datatype Required Default target The target value the decision tree predicts on string yes /","title":"Parameters"},{"location":"operations/decision_tree/#inputs","text":"Port Description type 0 Dataframe with data to train on dataframe It will attempt to train on all columns in the inputted dataframe.","title":"Inputs"},{"location":"operations/decision_tree/#outputs","text":"Port Description type 0 Trained decision tree model model Note that a model can not be returned in JSON.","title":"Outputs"},{"location":"operations/duplicate_operation/","text":"Duplicating data operation name duplicate Purpose The purpose of the duplicate operation is to duplicate a dataframe. This will output the same dataframe on port 0 and port 1. This is quite useless and can be circumvented entirely by simply having two connections have their 'from' be the same operation and their 'from_port' be the same port. Choose your own way of doing it. Parameters Duplicate operation has no parameters. Inputs Port Description type 0 Dataframe to duplicate dataframe Outputs Port Description type 0 The inputted dataframe dataframe 1 The inputted dataframe dataframe","title":"duplicate"},{"location":"operations/duplicate_operation/#duplicating-data","text":"","title":"Duplicating data"},{"location":"operations/duplicate_operation/#operation-name","text":"duplicate","title":"operation name"},{"location":"operations/duplicate_operation/#purpose","text":"The purpose of the duplicate operation is to duplicate a dataframe. This will output the same dataframe on port 0 and port 1. This is quite useless and can be circumvented entirely by simply having two connections have their 'from' be the same operation and their 'from_port' be the same port. Choose your own way of doing it.","title":"Purpose"},{"location":"operations/duplicate_operation/#parameters","text":"Duplicate operation has no parameters.","title":"Parameters"},{"location":"operations/duplicate_operation/#inputs","text":"Port Description type 0 Dataframe to duplicate dataframe","title":"Inputs"},{"location":"operations/duplicate_operation/#outputs","text":"Port Description type 0 The inputted dataframe dataframe 1 The inputted dataframe dataframe","title":"Outputs"},{"location":"operations/filter_rows_operation/","text":"Filtering rows Operation name filter_rows Purpose Filtering data based on a set of conditions. For example: removing every row where the column \"income\" has a value above 1800. Parameters Parameter Description Datatype Required Default conditions A list of conditions list yes / Condition A condition is a dictionary with following parameters. Parameter Description Datatype Required Default column The column you want to filter the data on string yes / comparator The comparison you want to make string yes / compare_with the column or value you want to compare with string, int, float yes / compare_with_type Defines what compare_with is (column or value) string yes / comparator Possible values: '==' '!=' '<' '>' '<=' '>=' For example, \"comparator\":\">\" will result in a dataset with only the rows where value in 'column' > 'compare_with'. compare_with_type Can be either 'column' or 'value' Inputs Port Description type 0 Dataframe to filter on dataframe Outputs Port Description type 0 filtered dataframe dataframe","title":"filter_rows"},{"location":"operations/filter_rows_operation/#filtering-rows","text":"","title":"Filtering rows"},{"location":"operations/filter_rows_operation/#operation-name","text":"filter_rows","title":"Operation name"},{"location":"operations/filter_rows_operation/#purpose","text":"Filtering data based on a set of conditions. For example: removing every row where the column \"income\" has a value above 1800.","title":"Purpose"},{"location":"operations/filter_rows_operation/#parameters","text":"Parameter Description Datatype Required Default conditions A list of conditions list yes /","title":"Parameters"},{"location":"operations/filter_rows_operation/#condition","text":"A condition is a dictionary with following parameters. Parameter Description Datatype Required Default column The column you want to filter the data on string yes / comparator The comparison you want to make string yes / compare_with the column or value you want to compare with string, int, float yes / compare_with_type Defines what compare_with is (column or value) string yes /","title":"Condition"},{"location":"operations/filter_rows_operation/#comparator","text":"Possible values: '==' '!=' '<' '>' '<=' '>=' For example, \"comparator\":\">\" will result in a dataset with only the rows where value in 'column' > 'compare_with'.","title":"comparator"},{"location":"operations/filter_rows_operation/#compare_with_type","text":"Can be either 'column' or 'value'","title":"compare_with_type"},{"location":"operations/filter_rows_operation/#inputs","text":"Port Description type 0 Dataframe to filter on dataframe","title":"Inputs"},{"location":"operations/filter_rows_operation/#outputs","text":"Port Description type 0 filtered dataframe dataframe","title":"Outputs"},{"location":"operations/load_operation/","text":"Loading data operation name load Purpose The purpose of the load operation is to load in data. Parameters Parameter Description Datatype Required Default filename The datafile to load string yes / sample sample size bool or int no False randomize_sample If true, randomizes what data is used for the sample bool no False Inputs The load operation does not take any inputs. Outputs Port Description type 0 Loaded dataframe dataframe","title":"load"},{"location":"operations/load_operation/#loading-data","text":"","title":"Loading data"},{"location":"operations/load_operation/#operation-name","text":"load","title":"operation name"},{"location":"operations/load_operation/#purpose","text":"The purpose of the load operation is to load in data.","title":"Purpose"},{"location":"operations/load_operation/#parameters","text":"Parameter Description Datatype Required Default filename The datafile to load string yes / sample sample size bool or int no False randomize_sample If true, randomizes what data is used for the sample bool no False","title":"Parameters"},{"location":"operations/load_operation/#inputs","text":"The load operation does not take any inputs.","title":"Inputs"},{"location":"operations/load_operation/#outputs","text":"Port Description type 0 Loaded dataframe dataframe","title":"Outputs"},{"location":"operations/merge_operation/","text":"Merging data operation name merge Purpose The purpose of the merge operation is to merge two dataframes. This will perform a join operation as in SQL. Parameters Parameter Description Datatype Required Default column_1 Column from inputted 'left' dataframe to join with string yes / column_2 Column from inputted 'right' dataframe to join with string yes / join_type Type of join to perform string no inner Join types join_type can be one of four values. inner outer left right These work the same as SQL joins Inputs Port Description type 0 'Left' dataframe to join on dataframe 1 'Right' dataframe to join on dataframe Outputs Port Description type 0 Merged dataframe dataframe","title":"merge"},{"location":"operations/merge_operation/#merging-data","text":"","title":"Merging data"},{"location":"operations/merge_operation/#operation-name","text":"merge","title":"operation name"},{"location":"operations/merge_operation/#purpose","text":"The purpose of the merge operation is to merge two dataframes. This will perform a join operation as in SQL.","title":"Purpose"},{"location":"operations/merge_operation/#parameters","text":"Parameter Description Datatype Required Default column_1 Column from inputted 'left' dataframe to join with string yes / column_2 Column from inputted 'right' dataframe to join with string yes / join_type Type of join to perform string no inner","title":"Parameters"},{"location":"operations/merge_operation/#join-types","text":"join_type can be one of four values. inner outer left right These work the same as SQL joins","title":"Join types"},{"location":"operations/merge_operation/#inputs","text":"Port Description type 0 'Left' dataframe to join on dataframe 1 'Right' dataframe to join on dataframe","title":"Inputs"},{"location":"operations/merge_operation/#outputs","text":"Port Description type 0 Merged dataframe dataframe","title":"Outputs"},{"location":"operations/predict_operation/","text":"Predicting operation name predict Purpose The purpose of the predict operation is to use an inputted decision tree to make a prediction. Parameters Parameter Description Datatype Required Default values list with lists of values to make predictions on list of lists yes / Inputs Port Description type 0 decision tree model model Outputs Port Description type 0 list of predicted outcomes list","title":"predict"},{"location":"operations/predict_operation/#predicting","text":"","title":"Predicting"},{"location":"operations/predict_operation/#operation-name","text":"predict","title":"operation name"},{"location":"operations/predict_operation/#purpose","text":"The purpose of the predict operation is to use an inputted decision tree to make a prediction.","title":"Purpose"},{"location":"operations/predict_operation/#parameters","text":"Parameter Description Datatype Required Default values list with lists of values to make predictions on list of lists yes /","title":"Parameters"},{"location":"operations/predict_operation/#inputs","text":"Port Description type 0 decision tree model model","title":"Inputs"},{"location":"operations/predict_operation/#outputs","text":"Port Description type 0 list of predicted outcomes list","title":"Outputs"},{"location":"operations/select_columns_operation/","text":"Selecting columns Operation name select_columns Purpose The purpose of the select_columns operation is to select columns from a dataframe and continue with a new dataframe with only these columns. Parameters Parameter Description Datatype Required Default columns The columns to be selected list of strings yes / Inputs Port Description type 0 Dataframe to select columns from dataframe Outputs Port Description type 0 Inputted dataframe with only the columns to select on dataframe 1 Inputted dataframe with columns to select on filtered out dataframe Port 1 effectively removes the columns.","title":"select_columns"},{"location":"operations/select_columns_operation/#selecting-columns","text":"","title":"Selecting columns"},{"location":"operations/select_columns_operation/#operation-name","text":"select_columns","title":"Operation name"},{"location":"operations/select_columns_operation/#purpose","text":"The purpose of the select_columns operation is to select columns from a dataframe and continue with a new dataframe with only these columns.","title":"Purpose"},{"location":"operations/select_columns_operation/#parameters","text":"Parameter Description Datatype Required Default columns The columns to be selected list of strings yes /","title":"Parameters"},{"location":"operations/select_columns_operation/#inputs","text":"Port Description type 0 Dataframe to select columns from dataframe","title":"Inputs"},{"location":"operations/select_columns_operation/#outputs","text":"Port Description type 0 Inputted dataframe with only the columns to select on dataframe 1 Inputted dataframe with columns to select on filtered out dataframe Port 1 effectively removes the columns.","title":"Outputs"}]}